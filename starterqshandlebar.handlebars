<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <title>Launch Your Digital Future</title>
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <meta name="description" content="A simple, powerful platform designed to scale with your ambition." />
    <link rel="icon" href="favicon.png">
    <!-- Optional: Use a modern font from Google Fonts, like 'Inter' -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap" rel="stylesheet">

    <!-- 
    ===================================================================
    CORE STYLES - Structure, Layout, and Global Element Rules 
    ===================================================================
    -->
    <style>
        /* ---------------------------------------------------- */
        /* FADE IN ANIMATION CSS (Preserved from original template) */
        /* ---------------------------------------------------- */
        @keyframes fadeinall {
            0% { opacity: 1; }
            97% { opacity: 0; }
            98% { opacity: 0; -webkit-transform: translateY(0); transform: translateY(0); }
            100% { opacity: 0; -webkit-transform: translateY(-100%); transform: translateY(-100%); z-index: -1; }
        }

        #fadein {
            opacity: 1;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            -webkit-transform: translateY(0);
            -ms-transform: translateY(0);
            transform: translateY(0);
            background-color: #FFFFFF;
            z-index: 999;
            -webkit-animation-fill-mode: forwards;
            animation-fill-mode: forwards;
            -webkit-animation: fadeinall 1s normal both;
            animation: fadeinall 1s normal both;
            -webkit-animation-delay: 0.3s;
            animation-delay: 0.3s;
        }

        /* ---------------------------------------------------- */
        /* 2. Layout, Typography, and Base Component Styling */
        /* ---------------------------------------------------- */

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            /* Applied subtle gradient and theme transition (Variables defined in Theme Styles below) */
            background: linear-gradient(135deg, var(--body-bg), var(--body-bg-end)); 
            font-family: var(--font-family);
            color: var(--text-dark);
            line-height: 1.6;
            transition: background 0.5s ease-in-out, color 0.3s;
        }

        /* Apply background and border transitions to core components */
        .navbar, .hero, .feature-card, .profile-card {
            background-color: var(--card-bg);
            transition: background-color 0.3s, border-color 0.3s;
        }
        
        .feature-card, .profile-card {
             border: 1px solid var(--border-light);
        }

        .section-light-bg {
            background-color: var(--background-light);
            transition: background-color 0.3s;
        }

        /* Base Container for Centering */
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }
        
        section {
            padding: 20px 0;
        }

        /* Typography */
        h1 { font-size: 3.5rem; font-weight: 800; line-height: 1.1; margin-bottom: 20px; }
        h2 { font-size: 2.5rem; font-weight: 800; margin-bottom: 30px; text-align: center; }
        h3 { font-size: 1.5rem; font-weight: 600; margin-bottom: 10px; }
        p { color: var(--text-light); margin-bottom: 15px; }

        /* Buttons & Links */
        .button {
            display: inline-block; padding: 12px 25px; border-radius: 8px; text-decoration: none;
            font-weight: 600; transition: background-color 0.2s, transform 0.1s; border: none; cursor: pointer;
        }
        .primary-button {
            background-color: var(--primary-color); color: var(--background-white);
            box-shadow: 0 4px 6px -1px var(--shadow-color), 0 2px 4px -2px var(--shadow-color);
        }
        .primary-button:hover {
            background-color: var(--primary-color); filter: brightness(0.9); transform: translateY(-1px);
        }
        .link-secondary {
            color: var(--primary-color); text-decoration: none; font-weight: 600; margin-left: 20px; transition: color 0.2s;
        }
        .link-secondary:hover { color: #2563eb; }
        .large-button { padding: 15px 35px; font-size: 1.1rem; }

        /* Navbar */
        .navbar {
            display: flex; justify-content: space-between; align-items: center; padding: 20px 20px;
            border-bottom: 1px solid var(--border-light); background-color: var(--card-bg);
        }
        .navbar-actions { display: flex; gap: 15px; align-items: center; }
        .logo { font-size: 1.5rem; font-weight: 800; color: var(--primary-color); }
        .auth-status .button {
            padding: 8px 18px; background-color: transparent; border: 1px solid var(--primary-color); color: var(--primary-color);
        }
        .auth-status .primary-button {
             background-color: var(--primary-color); color: var(--background-white); border: 1px solid var(--primary-color);
        }
        
        /* Theme Toggle Button */
        .theme-toggle-btn {
            background: none; border: none; cursor: pointer; color: var(--text-dark);
            font-size: 1.5rem; line-height: 1; padding: 5px; transition: color 0.2s;
        }
        .theme-toggle-btn:hover { color: var(--primary-color); }

        /* Hero Section */
        .hero {
            display: flex; flex-direction: column; align-items: center; text-align: center;
            padding: 80px 0; background-color: var(--card-bg);
        }
        .hero-content { max-width: 800px; }

        /* Features Grid */
        .features-grid { display: flex; gap: 30px; }
        .feature-card {
            flex: 1; padding: 30px; background-color: var(--card-bg); border-radius: 10px;
            transition: transform 0.3s, box-shadow 0.3s;
        }
        .feature-card:hover { transform: translateY(-5px); box-shadow: 0 10px 20px var(--shadow-color); }

        /* CTA Banner */
        .cta-banner {
            text-align: center; padding: 80px 40px; margin-top: 40px; margin-bottom: 40px;
            background: linear-gradient(135deg, var(--primary-color), #2563eb); 
            color: var(--background-white); border-radius: 12px;
            box-shadow: 0 10px 30px rgba(59, 130, 246, 0.4); 
        }

        /* Dashboard/Profile View */
        .dashboard-layout {
            display: grid; grid-template-columns: 2fr 1fr; gap: 40px;
            padding-top: 50px; padding-bottom: 50px;
        }
        .token-display {
            background-color: var(--code-bg); border-radius: 10px; padding: 20px;
            margin-bottom: 20px; word-break: break-all; font-family: monospace;
            border: 1px solid var(--border-light); font-size: 0.9rem; color: var(--text-dark);
        }
        .token-title {
            font-weight: 600; color: var(--text-dark); margin-bottom: 8px; font-family: var(--font-family);
        }
        .profile-card {
            padding: 30px; background-color: var(--card-bg); border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0,0,0,0.05);
        }
        .profile-list li {
            font-size: 0.95rem; padding: 5px 0; border-bottom: 1px dashed var(--border-light);
        }
        .profile-list li:last-child { border-bottom: none; }

        /* Debug Button and Modal */
        .debug-float-btn {
            position: fixed; bottom: 20px; right: 20px; width: 50px; height: 50px; border-radius: 50%;
            background-color: var(--primary-color); color: white; border: none; cursor: pointer;
            font-size: 0.8rem; font-weight: 700; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            z-index: 1000; transition: background-color 0.2s; text-align: center;
        }
        .debug-float-btn:hover { background-color: #2563eb; }
        .modal-overlay {
            position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5);
            display: flex; justify-content: center; align-items: center; z-index: 1001;
        }
        .modal-content {
            background-color: var(--card-bg); border-radius: 12px; padding: 30px; max-width: 90%;
            width: 700px; max-height: 80vh; overflow-y: auto; position: relative;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3); border: 1px solid var(--border-light);
        }
        .modal-content pre {
            background-color: var(--code-bg); padding: 15px; border-radius: 8px; overflow-x: auto;
            white-space: pre-wrap; word-wrap: break-word; font-size: 0.9rem; line-height: 1.4;
            color: var(--text-dark); border: 1px solid var(--border-light);
        }
        .modal-close-btn {
            position: absolute; top: 10px; right: 15px; background: none; border: none;
            font-size: 1.5rem; cursor: pointer; color: var(--text-light);
        }

        /* Responsiveness */
        @media (max-width: 900px) { .dashboard-layout { grid-template-columns: 1fr; } }
        @media (max-width: 768px) {
            h1 { font-size: 2.5rem; } h2 { font-size: 1.8rem; }
            .hero { padding-top: 40px; padding-bottom: 40px; }
            .hero-content { max-width: 100%; } .hero-content .primary-button { margin-bottom: 15px; }
            .features-grid { flex-direction: column; }
            .debug-float-btn { width: 40px; height: 40px; font-size: 0.7rem; }
        }

        /* Clean up unused mobile menu CSS from original template */
        .nav a:not(:first-child), .nav a#menu-toggle, .nav.nav--open { display: none !important; }
        .menu-toggle__bar1, .menu-toggle__bar2, .menu-toggle__bar3 { display: none !important; }
    </style>

    <!-- 
    ===================================================================
    THEME STYLES - Variables and Dark Mode Overrides
    ===================================================================
    -->
    <style>
        /* 1. Global Reset & Variables (Dark/Light Mode) */

        :root {
            /* Light Mode Default */
            --primary-color: #3b82f6; 
            --secondary-color: #10b981; 
            --text-dark: #1f2937;
            --text-light: #4b5563;
            --background-light: #f3f4f6; /* Subtle Light Grey */
            --background-white: #ffffff;
            --border-light: #e5e7eb;
            --code-bg: #f7f7f7;
            --body-bg: #f8faff; /* Gradient Start */
            --body-bg-end: #ffffff; /* Gradient End */
            --card-bg: var(--background-white);
            --shadow-color: rgba(0, 0, 0, 0.1);
            --font-family: 'Inter', sans-serif;
        }

        /* Dark Mode Colors */
        .dark-mode {
            --primary-color: #60a5fa; 
            --secondary-color: #34d399;
            --text-dark: #e5e7eb; 
            --text-light: #9ca3af; 
            --background-light: #374151; 
            --background-white: #111827; 
            --border-light: #374151;
            --code-bg: #1f2937;
            --body-bg: #111827;
            --body-bg-end: #0f172a;
            --card-bg: #1f2937;
            --shadow-color: rgba(255, 255, 255, 0.1);
        }
    </style>
</head>

<body>
    <!-- FADE-IN LOADER (Preserved from original template) -->
    <div id="fadein"></div>

    <!-- ------------------------------------------------------------------ -->
    <!-- 🔥 EDITORIAL CONTENT & DEBUG VARIABLES (EASY TO CHANGE HERE) 🔥 -->
    <!-- ------------------------------------------------------------------ -->
    <script>
        const HERO_TITLE = "Launch Your Integrated Platform Today.";
        const HERO_DESCRIPTION = "A simple, powerful platform designed to scale with your ambition. Built with modern security and results in mind.";
        const IS_DEBUG_MODE = true; // TOGGLE: Set to 'true' to show the floating debug button.
    </script>
    
    <!-- HIDDEN ELEMENT: Captures Handlebars variables as JSON for debug visibility -->
    <!-- FIX: Store the complex profile object as a single, quoted string to guarantee valid JSON structure. -->
    <script id="handlebars-context-data" type="application/json">
        {
            "profile_raw_string": "{{#if profile}}{{{json profile}}}{{else}}null{{/if}}",
            "access_token": "{{access_token}}",
            "id_token": "{{id_token}}",
            "isAuthenticated": {{#if profile}} true {{else}} false {{/if}}
        }
    </script>

    <!-- Header & Navigation (Handlebars Integrated) -->
    <header class="navbar container">
        <div class="logo">🚀 **VIRTUAL**</div>
        
        <!-- Authentication Status & Theme Toggle -->
        <div class="navbar-actions">
            <!-- Theme Toggle Button -->
            <button id="theme-toggle" class="theme-toggle-btn">
                <span id="theme-icon">🔆</span> <!-- Icon will be toggled by JS -->
            </button>
            
            <div class="auth-status">
                {{#if profile}}
                    <!-- Logged In: Show Logout -->
                    <a href="/logout" class="button primary-button">Logout</a>
                {{else}}
                    <!-- Logged Out: Show Login -->
                    <a href="/protected" class="button">Login</a>
                {{/if}}
            </div>
        </div>
    </header>

    <!-- =================================================================== -->
    <!-- LOGGED-IN VIEW: DASHBOARD / PROFILE PAGE -->
    <!-- =================================================================== -->
    {{#if profile}}
    <main class="container">
        <section>
            <h1 style="text-align: left; padding-top: 20px; font-size: 3rem;">
                Dashboard for {{profile.email}}
            </h1>
            <p style="text-align: left; font-size: 1.2rem; color: var(--text-light);">
                Your session tokens and user profile details are displayed below.
            </p>
        </section>
        
        <div class="dashboard-layout">
            <div class="main-content">
                <!-- TOKEN DISPLAY: Access Token -->
                <div class="token-title">Access Token (Used for API calls)</div>
                <div class="token-display">
                    {{access_token}} 
                    {{^access_token}}...Access Token not available in context...{{/access_token}}
                </div>

                <!-- TOKEN DISPLAY: ID Token -->
                <div class="token-title">ID Token (Contains User Identity)</div>
                <div class="token-display">
                    {{id_token}}
                    {{^id_token}}...ID Token not available in context...{{/id_token}}
                </div>
            </div>
            
            <aside class="sidebar">
                <!-- PROFILE DATA CARD -->
                <div class="profile-card">
                    <h3 style="margin-top: 0;">User Profile Details</h3>
                    <ul class="profile-list" style="list-style: none; padding: 0;">
                        <!-- FIX: Ensure we only iterate if profile is an object and not null -->
                        {{#if profile}}
                            {{#each profile}}
                            <li style="color: var(--text-dark);">
                                <b style="color: var(--primary-color);">{{@key}}</b>: {{this}}
                            </li>
                            {{/each}}
                        {{/if}}
                    </ul>
                </div>
            </aside>
        </div>
    </main>
    {{/if}}

    <!-- =================================================================== -->
    <!-- LOGGED-OUT VIEW: LANDING PAGE -->
    <!-- =================================================================== -->
    {{#unless profile}}
    <main>
        <!-- Hero Section -->
        <section class="hero container">
            <div class="hero-content">
                <!-- Dynamic Title -->
                <h1 id="hero-title">Default Hero Title</h1>
                <!-- Dynamic Description -->
                <p id="hero-description">Default hero description that will be replaced by JavaScript.</p>
                
                <a href="#cta" class="button primary-button">Get Started Free</a>
                <a href="#" class="link-secondary">Watch Demo Video →</a>
            </div>
        </section>

        <!-- Features Section (Wrapped in full-width gray background band) -->
        <div class="section-light-bg">
            <section id="features" class="features-grid container">
                <div class="feature-card">
                    <h3>⚡️ Performance</h3>
                    <p>Blazing fast load times and optimized performance for the best user experience.</p>
                </div>
                <div class="feature-card">
                    <h3>🔒 Security</h3>
                    <p>Enterprise-grade security and compliance to protect your data around the clock.</p>
                </div>
                <div class="feature-card">
                    <h3>🎨 Simplicity</h3>
                    <p>An intuitive interface that makes powerful tools accessible to everyone.</p>
                </div>
            </section>
        </div>

        <!-- CTA Section -->
        <section class="container">
            <div id="cta" class="cta-banner">
                <h2>Ready to build something amazing?</h2>
                <a href="#" class="button primary-button large-button">Join Thousands of Creators</a>
            </div>
        </section>
    </main>
    {{/unless}}

    <!-- Footer -->
    <footer>
        <div class="container">
            <p>
                &copy;
                <small>
                    <script>document.write(new Date().getFullYear())</script>
                    Your company name. All Rights Reserved.
                </small>
            </p>
        </div>
    </footer>
    
    <!-- =================================================================== -->
    <!-- DEBUG MODAL (Hidden by default) -->
    <!-- =================================================================== -->
    <div id="debug-modal-overlay" class="modal-overlay" style="display: none;">
        <div class="modal-content">
            <button id="modal-close-btn" class="modal-close-btn">&times;</button>
            <h3 style="margin-top: 0; color: var(--primary-color);">Handlebars Context Variables</h3>
            <p style="font-size: 0.9rem;">
                This JSON represents the key variables passed to the template.
            </p>
            <pre id="debug-content"></pre>
        </div>
    </div>

    <!-- =================================================================== -->
    <!-- DEBUG FLOATING BUTTON (Conditional on IS_DEBUG_MODE) -->
    <!-- =================================================================== -->
    <button id="debug-float-btn" class="debug-float-btn" style="display: none;">
        DEBUG
    </button>
    
    <!-- Preserve user's scripts -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" crossorigin="anonymous"></script>
    <script type="text/javascript">
        // Fade-in animation logic
        window.onload = function () {
            setTimeout(function () {
                document.getElementById("fadein").remove();
            }, 1000);
        };

        // --- Theme Toggle Logic ---
        const themeToggleBtn = document.getElementById('theme-toggle');
        const themeIcon = document.getElementById('theme-icon');

        function applyTheme(isDark) {
            document.body.classList.toggle('dark-mode', isDark);
            localStorage.setItem('theme', isDark ? 'dark' : 'light');
            themeIcon.textContent = isDark ? '🌙' : '🔆';
        }

        // Initialize theme based on local storage or system preference
        const storedTheme = localStorage.getItem('theme');
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        let isDarkMode = storedTheme === 'dark' || (!storedTheme && prefersDark);
        applyTheme(isDarkMode);

        // Toggle listener
        themeToggleBtn.addEventListener('click', () => {
            const currentlyDarkMode = document.body.classList.contains('dark-mode');
            applyTheme(!currentlyDarkMode);
        });


        // --- Dynamic Hero Content & Debug Logic ---
        document.addEventListener('DOMContentLoaded', () => {
            // 1. Apply Hero Content
            try {
                const heroTitleElement = document.getElementById('hero-title');
                const heroDescElement = document.getElementById('hero-description');

                if (typeof HERO_TITLE !== 'undefined' && heroTitleElement) {
                    heroTitleElement.textContent = HERO_TITLE;
                }
                if (typeof HERO_DESCRIPTION !== 'undefined' && heroDescElement) {
                    heroDescElement.textContent = HERO_DESCRIPTION;
                }
            } catch (e) {
                console.error("Failed to apply hero content variables:", e);
            }

            // 2. Debug Modal Logic
            try {
                if (typeof IS_DEBUG_MODE !== 'undefined' && IS_DEBUG_MODE) {
                    const debugBtn = document.getElementById('debug-float-btn');
                    const modalOverlay = document.getElementById('debug-modal-overlay');
                    const modalCloseBtn = document.getElementById('modal-close-btn');
                    const debugContent = document.getElementById('debug-content');
                    const contextScript = document.getElementById('handlebars-context-data');

                    // Show the button
                    debugBtn.style.display = 'block';

                    // --- FIX FOR JSON PARSE ERROR ---
                    let contextData;
                    try {
                        // 1. Parse the main wrapper JSON
                        contextData = JSON.parse(contextScript.textContent.trim());
                    } catch (e) {
                        console.error("Failed to parse Handlebars context JSON:", e);
                        contextData = { error: "Failed to parse main context data.", raw: contextScript.textContent.trim() };
                    }
                    
                    // 2. Safely parse the profile JSON string back into an object
                    let profileData = null;
                    if (contextData.profile_raw_string && contextData.profile_raw_string !== "null") {
                        try {
                            // Parse the string value stored under profile_raw_string
                            profileData = JSON.parse(contextData.profile_raw_string);
                        } catch (e) {
                            console.warn("Failed to parse profile JSON string. Displaying raw token data.", e);
                            profileData = { error: "JSON parse failed", raw_string: contextData.profile_raw_string };
                        }
                    }
                    
                    // 3. Re-create the cleaned context object for display
                    const cleanContextData = {
                        isAuthenticated: contextData.isAuthenticated,
                        access_token: contextData.access_token,
                        id_token: contextData.id_token,
                        profile: profileData
                    };

                    // Format the JSON content nicely
                    const formattedJson = JSON.stringify(cleanContextData, (key, value) => {
                        // Truncate long token strings for better display
                        if (typeof value === 'string' && (key === 'access_token' || key === 'id_token')) {
                            if (value.length > 50) {
                                return value.substring(0, 50) + '... (truncated, length: ' + value.length + ')';
                            }
                        }
                        return value;
                    }, 2); // '2' for nice indentation

                    debugContent.textContent = formattedJson;

                    // Open modal
                    debugBtn.addEventListener('click', () => {
                        modalOverlay.style.display = 'flex';
                    });

                    // Close modal
                    modalCloseBtn.addEventListener('click', () => {
                        modalOverlay.style.display = 'none';
                    });
                    
                    // Close modal on outside click
                    modalOverlay.addEventListener('click', (e) => {
                        if (e.target === modalOverlay) {
                            modalOverlay.style.display = 'none';
                        }
                    });
                }
            } catch (e) {
                console.error("Error setting up debug mode:", e);
            }
        });
    </script>
</body>

</html>
